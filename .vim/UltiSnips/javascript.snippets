priority -50

global !p
def sub(arg):
     names = re.sub(r'^(?:.*?)([^/.]+)(\.[^.]+)?$', r'\1', arg).split(r'-')
     for i in range(len(names)):
         if(i == 0):
             names[i] = names[i].lower()
         else:
             names[i] = names[i].capitalize()
     return ''.join(names)
endglobal

snippet #! "#!/usr/bin/env node" b
#!/usr/bin/env node
endsnippet

snippet req "assign a CommonJS-style module to a var" b
const ${2:`!p
snip.rv = sub(t[1])`} = require("$1");
endsnippet

snippet exp "module.exports" b
module.exports = $1;
endsnippet

snippet imp "import" b
import ${2:`!p
snip.rv = sub(t[1])`} from "${1}";
endsnippet

snippet if "if (condition) { ... }" w
if (${1:true}) {
	${VISUAL}$2
}
endsnippet

snippet ife "if (condition) { ... } else { ... }" w
if (${1:true}) {
	${VISUAL}$2
} else {
	${3}
}
endsnippet

snippet switch "switch statement" w
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet for "for statement" w
for (const ${1} of ${2}) {
	${3}
}
endsnippet

snippet do "do { ... } while (condition)" w
do {
	${VISUAL}$2
} while (${1:/* condition */});
endsnippet

snippet ret "Return statement" w
return ${VISUAL}$2;
endsnippet

snippet cl "class" w
class ${1} {
	${0}
}
endsnippet

snippet cle "class extends" w
class ${1} extends ${2} {
	${0}
}
endsnippet

snippet c "const var" w
const ${1} = ${2};
endsnippet

snippet lm "lambda function" w
(${2}) => {
  ${VISUAL}${3}
};
endsnippet

snippet "(\.(?:map|forEach|filter|reduce|every|some))" "array functions" r
`!p snip.rv = match.group(1)`((${1}) => {
	${VISUAL}${2}
})
endsnippet

snippet desc "jest describe function" b
describe("${1}", () => {
	${VISUAL}${2}
})
endsnippet

snippet test "jest test function" w
test("${1}", () => {
	${VISUAL}${2}
})
endsnippet
