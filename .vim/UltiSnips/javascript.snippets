priority -50

snippet #! "#!/usr/bin/env node" b
#!/usr/bin/env node
endsnippet

snippet req "assign a CommonJS-style module to a var"
const ${0:${1/(.+\/)*(\w+)(-|\b|$)(\..+$)?/\u$2/g}} = require('$1');
endsnippet

snippet imp "import"
import {0:${1/(.+\/)*(\w+)(-|\b|$)(\..+$)?/\u$2/g}} from ${1}
endsnippet

snippet exp "module.exports"
module.exports = $1;
endsnippet

snippet if "if (condition) { ... }"
if (${1:true}) {
	${VISUAL}$2
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
	${VISUAL}$2
} else {
	${3}
}
endsnippet

snippet switch
switch (${VISUAL}${1:expression}) {
	case '${VISUAL}${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet for
for (const ${1} of ${2}) {
	${3}
}
endsnippet

snippet do "do { ... } while (condition)"
do {
	${VISUAL}$2
} while (${1:/* condition */});
endsnippet

snippet ret "Return statement"
return ${VISUAL}$2;
endsnippet

snippet cls "ts class"
class ${1} {
	${0}
}
endsnippet

snippet clse "ts class extends"
class ${1} extends ${2} {
	${0}
}
endsnippet

snippet cons "const var"
const ${1} = ${2};
endsnippet

snippet lm "lambda function"
(${2}) => {
  ${3}
};
endsnippet

snippet clm "lambda function"
const ${1} = (${2}) => {
  ${3}
};
endsnippet

snippet mf "member function"
(${1}) {
  ${2}
}
endsnippet
