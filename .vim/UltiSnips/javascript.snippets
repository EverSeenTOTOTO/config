priority -50

snippet #! "#!/usr/bin/env node" b
#!/usr/bin/env node
endsnippet

snippet req "assign a CommonJS-style module to a var" b
const $2 = require("$1");
$3
endsnippet

snippet imp "import" b
import $2 from "$1";
$3
endsnippet

snippet if "if (condition) { ... }" w
if (${1:true}) {
	${VISUAL}$2
}
endsnippet

snippet ife "if (condition) { ... } else { ... }" w
if (${1:true}) {
	${VISUAL}$2
} else {
	${3}
}
endsnippet

snippet switch "switch statement" w
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet for "for statement" w
for (const ${1} of ${2}) {
	${VISUAL}$3
}
endsnippet

snippet fori "for i" w
for (let i = ${1})
	${VISUAL}$2
}
endsnippet

snippet do "do { ... } while (condition)" w
do {
	${VISUAL}$2
} while (${1:/* condition */});
endsnippet

snippet l "lambda function" w
(${2}) => {
  ${VISUAL}$3
};
endsnippet

snippet "(\.(?:map|forEach|filter|reduce|every|some))" "array functions" r
`!p snip.rv = match.group(1)`((${1}) => {
	${VISUAL}${2}
})
endsnippet

snippet "(setTimeout|setInterval|setImmediate|requestAnimationFrame|nextTick|\$nextTick)" "timers" r
`!p snip.rv = match.group(1)`(() => {
	${VISUAL}${1}
})
endsnippet

snippet Promise "promise" w
Promise((resolve, reject) => {
	${VISUAL}${1}
})
endsnippet

snippet desc "jest describe function" b
describe("${1}", () => {
	${VISUAL}${2}
})
endsnippet

snippet test "jest test function" w
test("${1}", () => {
	${VISUAL}${2}
})
endsnippet
