{
  "template": {
    "prefix": "template",
    "body": [
      "<template>",
      "\t<${1:div}$2>",
      "\t\t$0",
      "\t</${1:div}>",
      "</template>"
    ],
    "description": "template element"
  },
  "v-text": {
    "prefix": "v-text",
    "body": [
      "v-text=\"${1:msg}\""
    ],
    "description": "Expects: string. Updates the element’s textContent."
  },
  "v-html": {
    "prefix": "v-html",
    "body": [
      "v-html=\"${1:html}\""
    ],
    "description": "Expects: string. Updates the element’s innerHTML."
  },
  "v-show": {
    "prefix": "v-show",
    "body": [
      "v-show=\"${1:condition}\""
    ],
    "description": "Expects: any"
  },
  "v-if": {
    "prefix": "v-if",
    "body": [
      "v-if=\"${1:condition}\""
    ],
    "description": "Expects: any"
  },
  "v-else": {
    "prefix": "v-else",
    "body": [
      "v-else"
    ],
    "description": "Does not expect expression. previous sibling element must have v-if or v-else-if."
  },
  "v-else-if": {
    "prefix": "v-elif",
    "body": [
      "v-else-if=\"${1:condition}\""
    ],
    "description": "Expects: any. previous sibling element must have v-if or v-else-if."
  },
  "v-for": {
    "prefix": "v-for",
    "body": [
      "v-for=\"(${1:item}, ${2:index}) in ${3:items}\" :key=\"${4:index}\""
    ],
    "description": "Expects: Array | Object | number | string"
  },
  "v-on": {
    "prefix": "v-on",
    "body": [
      "v-on:${1:event}=\"${2:handle}\""
    ],
    "description": "Expects: Function | Inline Statement"
  },
  "v-on-shortcut": {
    "prefix": "@",
    "body": [
      "@${1:event}=\"${2:handle}\""
    ],
    "description": "v-on shortcut from vue 3"
  },
  "v-bind": {
    "prefix": "v-bind",
    "body": [
      "v-bind$1=\"${2}\""
    ],
    "description": "Expects: any (with argument) | Object (without argument)"
  },
  "v-model": {
    "prefix": "v-model",
    "body": [
      "v-model=\"${1:something}\""
    ],
    "description": "Expects: varies based on value of form inputs element or output of components"
  },
  "v-slot": {
    "prefix": "v-slot",
    "body": [
      "v-slot$1=\"${2}\""
    ],
    "description": "Expects: JavaScript expression that is valid in a function argument position (supports destructuring in supported environments). Optional - only needed if expecting props to be passed to the slot."
  },
  "v-pre": {
    "prefix": "v-pre",
    "body": [
      "v-pre"
    ],
    "description": "Does not expect expression"
  },
  "v-cloak": {
    "prefix": "v-cloak",
    "body": [
      "v-cloak"
    ],
    "description": "Does not expect expression"
  },
  "v-once": {
    "prefix": "v-once",
    "body": [
      "v-once"
    ],
    "description": "Does not expect expression"
  },
  "key": {
    "prefix": "key",
    "body": [
      ":key=\"${1:key}\""
    ],
    "description": "Expects: string. Children of the same common parent must have unique keys. Duplicate keys will cause render errors."
  },
  "ref": {
    "prefix": "ref",
    "body": [
      "ref=\"${1:reference}\"$0"
    ],
    "description": "Expects: string. ref is used to register a reference to an element or a child component. The reference will be registered under the parent component’s $refs object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance."
  },
  "slotA": {
    "prefix": "slot",
    "body": [
      "slot=\"$1\"$0"
    ],
    "description": "slot=''. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
  },
  "slotScope": {
    "prefix": "slot-scope",
    "body": [
      "slot-scope=\"$1\"$0"
    ],
    "description": "Used to denote an element or component as a scoped slot. The attribute’s value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for scope in 2.5.0+."
  },
  "scope": {
    "prefix": "scope",
    "body": [
      "scope=\"${1:this api replaced by slot-scope in 2.5.0+}\"$0"
    ],
    "description": "Used to denote a <template> element as a scoped slot, which is replaced by `slot-scope` in 2.5.0+."
  },
  "component": {
    "prefix": "component",
    "body": [
      "<component :is=\"${1:componentId}\"></component>$0"
    ],
    "description": "component element"
  },
  "keep-alive": {
    "prefix": "keep-alive",
    "body": [
      "<keep-alive$1>",
      "$2",
      "</keep-alive>$0"
    ],
    "description": "keep-alive element"
  },
  "transition": {
    "prefix": "transition",
    "body": [
      "<transition$1>",
      "$2",
      "</transition>$0"
    ],
    "description": "transition element"
  },
  "transition-group": {
    "prefix": "transition-group",
    "body": [
      "<transition-group$1>",
      "$2",
      "</transition-group>"
    ],
    "description": "transition-group element"
  },
  "routerLink": {
    "prefix": "router-link",
    "body": [
      "<router-link $1>$2</router-link>$0"
    ],
    "description": "router-link element"
  },
  "to": {
    "prefix": "to",
    "body": [
      "to=\"$1\"$0"
    ],
    "description": "to=''"
  },
  "tag": {
    "prefix": "tag",
    "body": [
      "tag=\"$1\"$0"
    ],
    "description": "tag=''"
  },
  "routerView": {
    "prefix": "router-view",
    "body": [
      "<router-view>$1</router-view>$0"
    ],
    "description": "router-view element"
  },
  "teleport": {
    "prefix": "teleport",
    "body": [
      "<Teleport to=\"$1\">",
      "$0",
      "</Teleport>"
    ],
    "description": "<Teleport> is a built-in component that allows us to 'teleport' a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component."
  },
  "suspense": {
    "prefix": "suspense",
    "body": [
      "<Suspense>",
      "$0",
      "</Suspense>"
    ],
    "description": "<Suspense> will render its default slot content in memory. If any async dependencies are encountered during the process, it will enter a pending state."
  }
}
