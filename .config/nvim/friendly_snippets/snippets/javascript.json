{
  "setTimeout": {
    "prefix": "setT",
    "body": [
      "setTimeout(() => {",
      "\t$0",
      "}, ${1:timeout});"
    ],
    "description": "Set Timeout Function"
  },
  "setInterval": {
    "prefix": "setI",
    "body": "setInterval(() => {\n\t${0}\n}, ${1:interval});"
  },
  "await sleep": {
    "prefix": "sleep",
    "body": "await new Promise((res) => setTimeout(res, ${0}))"
  },
  "new Promise": {
    "prefix": "new P",
    "body": "new Promise((res${0}) => {\n\t${1}\n})"
  },
  "Promise.then": {
    "prefix": ".then",
    "body": ".then((${2:value}) => {\n\t${0}\n})"
  },
  "Promise.catch": {
    "prefix": ".catch",
    "body": ".catch(error => {\n\t${0}\n})"
  },
  "describe": {
    "prefix": "desc",
    "body": "describe('${1:description}', () => {\n\t${0}\n})"
  },
  "it asynchronous": {
    "prefix": "it",
    "body": "it('${1:description}', () => {\n\t${0}\n})"
  },
  "require": {
    "prefix": "req",
    "body": "require('${1:module}')"
  },
  "const module = require('module')": {
    "prefix": "creq",
    "body": "const ${1:module} = require('${1:module}')"
  },
  "export": {
    "prefix": "exp",
    "body": "export const ${1:member} = ${2:value}"
  },
  "module.exports": {
    "prefix": "mexp",
    "body": "module.exports = ${1:name}"
  },
  "import module": {
    "prefix": "imp",
    "body": "import ${2:*} from '${1:module}'"
  },
  "import module as": {
    "prefix": "impa",
    "body": "import ${2:*} as ${3:name} from '${1:module}'"
  },
  "import module destructured": {
    "prefix": "impd",
    "body": "import { $2 } from '${1:module}'"
  },
  "event handler": {
    "prefix": ".on",
    "body": ".on('${1:event}', (${2:arguments}) => {\n\t${0}\n})"
  },
  "addEventListener": {
    "prefix": ".addEv",
    "body": ".addEventListener('${1:event}', ${2:ev} => {\n\t${0}\n})"
  },
  "removeEventListener": {
    "prefix": ".removeEv",
    "body": ".removeEventListener('${1:event}', ${2:listener})"
  },
  "querySelector": {
    "prefix": "qs",
    "body": "${1:document}.querySelector('${2:selector}')"
  },
  "querySelectorAll": {
    "prefix": "qsa",
    "body": "Array.from(${1:document}.querySelectorAll('${2:selector}'))"
  },
  "forEach loop": {
    "prefix": ".forEach",
    "body": ".forEach((${1:item}) => {\n\t${0}\n})"
  },
  "map": {
    "prefix": ".map",
    "body": ".map((${1:item}) => {\n\t${0}\n})"
  },
  "reduce": {
    "prefix": ".reduce",
    "body": ".reduce((${1:previous}, ${2:current}) => {\n\t${0}\n}${3:, initial})"
  },
  "filter": {
    "prefix": ".filter",
    "body": ".filter((${1:item}) => {\n\t${0}\n})"
  },
  "find": {
    "prefix": ".find",
    "body": ".find((${1:item}) => {\n\t${0}\n})"
  },
  "every": {
    "prefix": ".every",
    "body": ".every((${1:item}) => {\n\t${0}\n})"
  },
  "some": {
    "prefix": ".some",
    "body": ".some((${1:item}) => {\n\t${0}\n})"
  },
  "const statement from destructuring": {
    "prefix": "constd",
    "body": "const { ${2:prop} } = ${1:value}"
  },
  "generate array of integers starting with 1": {
    "prefix": "range1",
    "body": "Array.from({ length: ${1:length} }, (v, k) => k + 1)"
  },
  "generate array of integers starting with 0": {
    "prefix": "range0",
    "body": "[...Array(${1:length}).keys()]"
  },
  "class": {
    "prefix": "class",
    "body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}"
  },
  "else statement": {
    "prefix": "else",
    "body": "else {\n\t${0}\n}"
  },
  "else if statement": {
    "prefix": "elif",
    "body": "else if (${1:condition}) {\n\t${0}\n}"
  },
  "throw new Error": {
    "prefix": "throw",
    "body": "throw new Error(`${0:message}`)"
  },
  "try/catch": {
    "prefix": "try",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
  },
  "try/catch/finally": {
    "prefix": "tryf",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
  },
  "named function": {
    "prefix": "function",
    "body": "function ${1:name} (${2:arguments}) {\n\t${0}\n}"
  },
  "async function": {
    "prefix": "fna",
    "body": "async function (${1:arguments}) {\n\t${0}\n}"
  },
  "async immediately-invoked function expression": {
    "prefix": "iife",
    "body": ";(async (${1:arguments}) => {\n\t${0}\n})(${2})"
  },
  "arrow function": {
    "prefix": "fn",
    "body": "(${1:arguments}) => ${2:statement}"
  },
  "console.log": {
    "prefix": "log",
    "body": "console.log(${0})"
  },
  "console.error": {
    "prefix": "error",
    "body": "console.error(${0})"
  },
  "console.warn": {
    "prefix": "warn",
    "body": "console.warn(${0})"
  },
  "getter": {
    "prefix": "get",
    "body": "get ${1:property} () {\n\t${0}\n}"
  },
  "setter": {
    "prefix": "set",
    "body": "set ${1:property} (${2:value}) {\n\t${0}\n}"
  },
  "For Loop": {
    "prefix": "fori",
    "body": [
      "for (let ${1:i} = 0; ${1:i} < ${2:array}; ++${1:i}) {",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop": {
    "prefix": "foreach",
    "body": [
      "${1:array}.forEach(${2:element} => {",
      "\t$0",
      "});"
    ],
    "description": "For-Each Loop"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (${2:object}.hasOwnProperty(${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": [
      "for (const ${1:iterator} of ${2:object}) {",
      "\t$0",
      "}"
    ],
    "description": "For-Of Loop"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t$0",
      "} else {",
      "\t",
      "}"
    ],
    "description": "If-Else Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "do",
    "body": [
      "do {",
      "\t$0",
      "} while (${1:condition});"
    ],
    "description": "Do-While Statement"
  }
}
