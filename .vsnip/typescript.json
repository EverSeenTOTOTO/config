{
  "await sleep": {
    "prefix": "sleep",
    "body": "await new Promise((resolve) => setTimeout(${1:resolve}, ${0}))"
  },
  "it": {
    "prefix": "it",
    "body": "it('${1:description}', async () => {\n\t${0}\n})"
  },
  "map": {
    "prefix": "map",
    "body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
  },
  "reduce": {
    "prefix": "reduce",
    "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
  },
  "filter": {
    "prefix": "filter",
    "body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
  },
  "find": {
    "prefix": "find",
    "body": "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"
  },
  "every": {
    "prefix": "every",
    "body": "${1:iterable}.every((${2:item}) => {\n\t${0}\n})"
  },
  "some": {
    "prefix": "some",
    "body": "${1:iterable}.some((${2:item}) => {\n\t${0}\n})"
  },
  "class": {
    "prefix": "cls",
    "body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}"
  },
  "else if statement": {
    "prefix": "elif",
    "body": "else if (${1:condition}) {\n\t${0}\n}"
  },
  "try/catch": {
    "prefix": "try",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
  },
  "try/catch/finally": {
    "prefix": "tryf",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
  },
  "named function": {
    "prefix": "fn",
    "body": "const ${1:name} = (${2:arguments}) => {\n\t${0}\n}"
  },
  "async immediately-invoked function expression": {
    "prefix": "iife",
    "body": ";(async (${1:arguments}) => {\n\t${0}\n})(${2})"
  },
  "console.log": {
    "prefix": "log",
    "body": "console.log(${0})"
  },
  "console.error": {
    "prefix": "err",
    "body": "console.error(${0})"
  },
  "console.warn": {
    "prefix": "warn",
    "body": "console.warn(${0})"
  },
  "JSON.stringify()": {
    "prefix": "js",
    "body": "JSON.stringify($0)"
  },
  "JSON.parse()": {
    "prefix": "jp",
    "body": "JSON.parse($0)"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:i} = 0; ${1:i} < ${2:array}.length; ${1:i}++) {",
      "\tconst ${3:element} = ${2:array}[${1:i}];",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": [
      "for (const ${1:iterator} of ${2:object}) {",
      "\t$0",
      "}"
    ],
    "description": "For-Of Loop"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "Set Timeout Function": {
    "prefix": [
      "settimeout",
      "setTimeout"
    ],
    "body": [
      "setTimeout(() => {",
      "\t$0",
      "}, ${1:timeout});"
    ],
    "description": "Set Timeout Function"
  },
  "Set Interval Function": {
    "prefix": [
      "setinterval",
      "setInterval"
    ],
    "body": [
      "setInterval(() => {",
      "\t$0",
      "}, ${1:interval});"
    ],
    "description": "Set Interval Function"
  }
}
